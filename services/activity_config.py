# services/auto_activity_service.py - VERSI√ìN COMPLETA Y MEJORADA

"""
Servicio completo de actividad autom√°tica para ZeepubsBot.
Mantiene el chat activo con recomendaciones personalizadas cada media hora.
Incluye personalidad, variedad de mensajes y configuraci√≥n avanzada.
"""

import asyncio
import random
from datetime import datetime, timedelta, time
from typing import Dict, Any, List, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

from telegram import Bot
from telegram.constants import ChatAction, ParseMode
from telegram.error import TelegramError

from config.bot_config import get_config, get_logger
from data.book_repository import BookRepository
from utils.error_handler import log_service_error
from utils.message_formatter import MessageFormatter


class ActivityMode(Enum):
    """Modos de actividad del servicio."""
    NORMAL = "normal"  # Recomendaciones regulares
    DISCOVERY = "discovery"  # Enfoque en libros menos conocidos
    POPULAR = "popular"  # Enfoque en libros populares
    VARIED = "varied"  # Mezcla de todo


@dataclass
class BookOpinion:
    """Estructura mejorada para opiniones sobre libros."""
    book_id: str
    title: str
    author: str
    positive_aspects: List[str]
    concerns: List[str]
    rating: int  # 1-5
    recommendation_reason: str
    target_audience: str
    mood_tags: List[str]
    personality_tone: str  # enthusiastic, thoughtful, casual
    special_note: Optional[str] = None


class EnhancedAutoActivityService:
    """Servicio mejorado para mantener actividad autom√°tica en el chat."""

    def __init__(self, bot: Bot):
        """Inicializa el servicio con configuraci√≥n avanzada."""
        self.bot = bot
        self.config = get_config()
        self.logger = get_logger(__name__)
        self.book_repository = BookRepository()
        self.message_formatter = MessageFormatter()

        # Estado del servicio
        self._is_running = False
        self._task: Optional[asyncio.Task] = None
        self._last_recommendation_time: Optional[datetime] = None

        # Configuraci√≥n base
        self.interval_minutes = 30
        self.target_chat_id = self.config.developer_chat_id

        # Configuraci√≥n avanzada
        self.activity_mode = ActivityMode.VARIED
        self.respect_quiet_hours = False
        self.quiet_hours = (23, 7)  # 11 PM a 7 AM

        # Cache y estad√≠sticas
        self._recently_recommended: List[str] = []
        self._max_recent_cache = 25
        self._daily_recommendations = 0
        self._last_reset_date = datetime.now().date()

        # Personalidad y variedad
        self._personality_states = ['enthusiastic', 'thoughtful', 'casual', 'excited']
        self._current_personality = 'enthusiastic'
        self._message_templates = self._load_message_templates()

    def _load_message_templates(self) -> Dict[str, List[str]]:
        """Carga plantillas de mensajes para variedad."""
        return {
            'intro_enthusiastic': [
                "üåü **¬°Neko-chan con una recomendaci√≥n especial!** üåü",
                "‚ú® **¬°Hora de una nueva joya literaria!** ‚ú®",
                "üéâ **¬°Tengo el libro perfecto para compartir!** üéâ",
                "üìö **¬°Nueva recomendaci√≥n de tu bibliotecaria favorita!** üìö"
            ],
            'intro_thoughtful': [
                "ü§î **Reflexionando sobre mi pr√≥xima recomendaci√≥n...** ü§î",
                "üí≠ **He estado pensando en este libro...** üí≠",
                "üìñ **D√©jame compartir una reflexi√≥n literaria...** üìñ",
                "üßê **An√°lisis literario de Neko-chan...** üßê"
            ],
            'intro_casual': [
                "üòä **¬°Hola! ¬øQu√© tal otra recomendaci√≥n?** üòä",
                "üìö **Oye, este libro me llam√≥ la atenci√≥n...** üìö",
                "‚ú® **¬°Quick recommendation time!** ‚ú®",
                "üéØ **Libro del d√≠a cortes√≠a de Neko-chan...** üéØ"
            ],
            'closing_enthusiastic': [
                "¬°Espero que lo ames tanto como yo! üíñ",
                "¬°No puedo esperar a que me cuentes qu√© te pareci√≥! ü§ó",
                "¬°Seguro que ser√° una experiencia incre√≠ble! ‚ú®",
                "¬°Disfr√∫talo mucho y cu√©ntame todo! üòç"
            ],
            'closing_thoughtful': [
                "Me encantar√≠a conocer tu perspectiva cuando lo termines. ü§î",
                "Ser√° interesante ver si coincidimos en nuestras impresiones. üí≠",
                "Espero que encuentres en √©l lo mismo que yo vi. üìö",
                "Tu opini√≥n siempre enriquece mi comprensi√≥n de los libros. üß†"
            ],
            'transitions': [
                "Mientras tanto, en nuestra biblioteca...",
                "Cambiando de tema literario...",
                "En otras noticias bookish...",
                "Y ahora, para algo completamente diferente...",
                "Siguiente parada: ¬°otro gran libro!",
                "Plot twist: ¬°m√°s recomendaciones!"
            ]
        }

    async def start_activity_service(self) -> bool:
        """Inicia el servicio con mensaje personalizado."""
        try:
            if self._is_running:
                self.logger.warning("Servicio ya est√° ejecut√°ndose")
                return False

            self._is_running = True
            self._task = asyncio.create_task(self._enhanced_activity_loop())

            self.logger.info("ü§ñ Servicio de actividad autom√°tica iniciado")

            # Mensaje de inicio m√°s personalizado
            await self._send_enhanced_startup_message()

            return True

        except Exception as e:
            log_service_error("EnhancedAutoActivityService", e)
            self._is_running = False
            return False

    async def _enhanced_activity_loop(self) -> None:
        """Loop mejorado con gesti√≥n inteligente de tiempo."""
        try:
            while self._is_running:
                try:
                    # Verificar si es hora silenciosa
                    if self._is_quiet_time():
                        await asyncio.sleep(300)  # Revisar cada 5 minutos
                        continue

                    # Resetear contador diario si es necesario
                    self._reset_daily_counter_if_needed()

                    # Esperar intervalo con variaci√≥n aleatoria (¬±5 minutos)
                    variation = random.randint(-5, 5)
                    sleep_time = max(5, self.interval_minutes + variation) * 60
                    await asyncio.sleep(sleep_time)

                    if not self._is_running:
                        break

                    # Cambiar personalidad ocasionalmente
                    if random.random() < 0.3:  # 30% chance
                        self._current_personality = random.choice(self._personality_states)

                    # Enviar recomendaci√≥n mejorada
                    await self._send_enhanced_recommendation()

                except asyncio.CancelledError:
                    break
                except Exception as e:
                    log_service_error("EnhancedAutoActivityService", e)
                    await asyncio.sleep(300)  # Wait 5 minutes on error

        except Exception as e:
            log_service_error("EnhancedAutoActivityService", e)
        finally:
            self._is_running = False

    def _is_quiet_time(self) -> bool:
        """Verifica si estamos en horario silencioso."""
        if not self.respect_quiet_hours:
            return False

        now = datetime.now().time()
        quiet_start = time(self.quiet_hours[0])
        quiet_end = time(self.quiet_hours[1])

        if quiet_start > quiet_end:  # Cruza medianoche
            return now >= quiet_start or now <= quiet_end
        else:
            return quiet_start <= now <= quiet_end

    def _reset_daily_counter_if_needed(self) -> None:
        """Resetea contador diario si cambi√≥ el d√≠a."""
        today = datetime.now().date()
        if today > self._last_reset_date:
            self._daily_recommendations = 0
            self._last_reset_date = today
            self.logger.info("üîÑ Contador diario de recomendaciones reseteado")

    async def _send_enhanced_startup_message(self) -> None:
        """Env√≠a mensaje de inicio mejorado y personalizado."""
        try:
            startup_messages = [
                """
ü§ñ **¬°Neko-chan despert√≥ con energ√≠a renovada!** ‚ú®

¬°Hola! He activado mi sistema de recomendaciones autom√°ticas con nuevas mejoras:

üéØ **Caracter√≠sticas especiales:**
‚Ä¢ Recomendaciones cada 30 minutos (con peque√±as variaciones)
‚Ä¢ Opiniones personales detalladas sobre cada libro
‚Ä¢ Diferentes personalidades y tonos para mantener la variedad
‚Ä¢ Selecci√≥n inteligente evitando repeticiones recientes

üìö **Mi promesa:** Mantener nuestra conversaci√≥n literaria siempre viva y emocionante.

üí´ *¬øListos para descubrir juntos los tesoros de nuestra biblioteca?*
""",
                """
üåü **¬°Sistema de recomendaciones Neko-chan 2.0 activado!** üåü

¬°Bienvenidos a una experiencia literaria mejorada!

‚ú® **Qu√© pueden esperar:**
‚Ä¢ Recomendaciones autom√°ticas cada media hora
‚Ä¢ Mi an√°lisis personal honesto de cada libro
‚Ä¢ Variedad en estilos y personalidades
‚Ä¢ Enfoque en mantener nuestra charla activa y divertida

üé≤ **Modo actual:** Variado (mezclo de todo tipo de libros)

üìñ *¬°Prep√°rense para una aventura literaria continua!*
"""
            ]

            message = random.choice(startup_messages)
            await self._send_activity_message(message)

        except Exception as e:
            self.logger.warning(f"Error enviando mensaje de inicio: {e}")

    async def _send_enhanced_recommendation(self) -> None:
        """Env√≠a recomendaci√≥n mejorada con personalidad."""
        try:
            # Seleccionar libro seg√∫n modo de actividad
            book = await self._intelligent_book_selection()

            if not book:
                await self._send_enhanced_no_books_message()
                return

            # Generar opini√≥n con personalidad actual
            opinion = await self._generate_enhanced_opinion(book)

            # Formatear mensaje con plantillas
            message = self._format_enhanced_message(book, opinion)

            # Enviar con efectos visuales
            await self._send_with_visual_effects(book, message)

            # Actualizar estad√≠sticas
            self._update_recommendation_stats(book.book_id)

            self.logger.info(f"Recomendaci√≥n mejorada enviada: {book.title} (modo: {self._current_personality})")

        except Exception as e:
            log_service_error("EnhancedAutoActivityService", e)

    async def _intelligent_book_selection(self) -> Optional[Any]:
        """Selecci√≥n inteligente basada en el modo de actividad."""
        try:
            all_books = self.book_repository.find_all()
            if not all_books:
                return None

            # Filtrar libros recientes
            available_books = [
                book for book in all_books
                if book.book_id not in self._recently_recommended
            ]

            if not available_books:
                # Limpiar cache parcialmente en lugar de completamente
                self._recently_recommended = self._recently_recommended[-10:]
                available_books = all_books

            # Selecci√≥n seg√∫n modo de actividad
            if self.activity_mode == ActivityMode.POPULAR:
                candidate_books = self.book_repository.find_popular(15)
                available_candidates = [
                                           book for book in candidate_books
                                           if book.book_id not in self._recently_recommended
                                       ] or candidate_books[:5]

            elif self.activity_mode == ActivityMode.DISCOVERY:
                # Libros con menos descargas
                all_with_stats = []
                for book in available_books:
                    stats = self.book_repository.get_book_stats(book.book_id)
                    downloads = stats.downloads if stats else 0
                    all_with_stats.append((book, downloads))

                # Ordenar por menos descargas
                all_with_stats.sort(key=lambda x: x[1])
                available_candidates = [book for book, _ in all_with_stats[:20]]

            else:  # NORMAL o VARIED
                # Mezcla inteligente: 60% aleatorio, 40% popular
                if random.random() < 0.6:
                    available_candidates = available_books
                else:
                    popular_books = self.book_repository.find_popular(10)
                    available_candidates = [
                                               book for book in popular_books
                                               if book.book_id not in self._recently_recommended
                                           ] or popular_books[:3]

            return random.choice(available_candidates)

        except Exception as e:
            log_service_error("EnhancedAutoActivityService", e)
            return None

    async def _generate_enhanced_opinion(self, book) -> BookOpinion:
        """Genera opini√≥n mejorada con personalidad din√°mica."""
        try:
            stats = self.book_repository.get_book_stats(book.book_id)
            downloads = stats.downloads if stats else 0

            # Generar componentes con personalidad
            positive_aspects = self._generate_personality_aspects(book, downloads, positive=True)
            concerns = self._generate_personality_aspects(book, downloads, positive=False)

            # Rating con ligera variaci√≥n aleatoria para naturalidad
            base_rating = self._calculate_dynamic_rating(book, downloads)
            rating = max(1, min(5, base_rating + random.choice([-1, 0, 0, 1])))

            # Generar elementos seg√∫n personalidad actual
            recommendation_reason = self._generate_personality_reason(book, rating)
            target_audience = self._generate_smart_audience(book)
            mood_tags = self._generate_contextual_moods(book)
            special_note = self._generate_special_note(book, downloads)

            return BookOpinion(
                book_id=book.book_id,
                title=book.title,
                author=book.author,
                positive_aspects=positive_aspects,
                concerns=concerns,
                rating=rating,
                recommendation_reason=recommendation_reason,
                target_audience=target_audience,
                mood_tags=mood_tags,
                personality_tone=self._current_personality,
                special_note=special_note
            )

        except Exception as e:
            log_service_error("EnhancedAutoActivityService", e)
            # Opini√≥n simple como fallback
            return BookOpinion(
                book_id=book.book_id,
                title=book.title,
                author=book.author,
                positive_aspects=["Me parece una lectura interesante"],
                concerns=["Podr√≠a no ser para todos"],
                rating=3,
                recommendation_reason="Es una buena opci√≥n para explorar",
                target_audience="lectores curiosos",
                mood_tags=["exploraci√≥n"],
                personality_tone="casual"
            )

    def _generate_personality_aspects(self, book, downloads: int, positive: bool) -> List[str]:
        """Genera aspectos positivos o negativos seg√∫n personalidad."""
        if positive:
            base_aspects = {
                'enthusiastic': [
                    f"¬°Me fascina completamente el estilo de {book.author}!",
                    "¬°La premisa me tiene s√∫per emocionada!",
                    "¬°Es exactamente el tipo de historia que amo!",
                    f"¬°{book.title} promete ser una experiencia incre√≠ble!"
                ],
                'thoughtful': [
                    f"La propuesta narrativa de {book.author} es muy s√≥lida",
                    "Me parece una exploraci√≥n profunda del tema",
                    "La estructura del libro est√° muy bien pensada",
                    "Ofrece perspectivas realmente valiosas"
                ],
                'casual': [
                    "Tiene buena pinta, la verdad",
                    f"Me gusta c√≥mo escribe {book.author}",
                    "Es del tipo de libros que disfruto",
                    "Se ve como una lectura entretenida"
                ]
            }
        else:
            base_aspects = {
                'enthusiastic': [
                    "¬°Aunque podr√≠a ser un poquito intenso para algunos!",
                    "¬°Requiere estar en el mood perfecto para disfrutarlo!",
                    "¬°Definitivamente no es una lectura ligera!"
                ],
                'thoughtful': [
                    "Requiere cierta preparaci√≥n mental para apreciarlo",
                    "El ritmo podr√≠a no ser ideal para todos los momentos",
                    "Es importante tener expectativas realistas"
                ],
                'casual': [
                    "No es para todos los gustos, eso s√≠",
                    "Mejor leerlo cuando tengas tiempo",
                    "Podr√≠a ser un poco lento al principio"
                ]
            }

        personality_aspects = base_aspects.get(self._current_personality, base_aspects['casual'])

        # Agregar aspectos espec√≠ficos seg√∫n caracter√≠sticas del libro
        if positive:
            if downloads > 10:
                personality_aspects.append("Es s√∫per popular entre nuestros lectores")
            if book.description and len(book.description) > 150:
                personality_aspects.append("La sinopsis me convenci√≥ totalmente")
        else:
            if book.language != 'es':
                personality_aspects.append("Est√° en otro idioma, que puede ser desafiante")

        # Seleccionar 2-3 aspectos
        return random.sample(personality_aspects, min(3, len(personality_aspects)))

    def _generate_personality_reason(self, book, rating: int) -> str:
        """Genera raz√≥n de recomendaci√≥n seg√∫n personalidad."""
        reasons = {
            'enthusiastic': {
                5: ["¬°Es absolutamente PERFECTO y tienes que leerlo YA!",
                    "¬°No puedo contener mi emoci√≥n por este libro!", "¬°Es una obra maestra que cambiar√° tu vida!"],
                4: ["¬°Me encanta y estoy segura de que a ti tambi√©n!",
                    "¬°Es s√∫per bueno y lo recomiendo con los ojos cerrados!",
                    "¬°Definitivamente vale cada minuto que inviertas!"],
                3: ["¬°Es una lectura s√≥lida que merece una oportunidad!", "¬°Me gust√≥ y creo que podr√≠a sorprenderte!",
                    "¬°Es perfecto para cuando buscas algo confiable!"],
                2: ["Es interesante, aunque con sus peculiaridades", "Podr√≠a gustarte si est√°s en mood experimental"],
                1: ["Es... una experiencia √∫nica, eso seguro"]
            },
            'thoughtful': {
                5: ["Representa una contribuci√≥n significativa a la literatura",
                    "Es una lectura que enriquece profundamente", "Ofrece una experiencia reflexiva excepcional"],
                4: ["Es una obra s√≥lida que vale la pena considerar", "Presenta ideas valiosas de manera efectiva",
                    "Me parece una lectura muy recomendable"],
                3: ["Es una opci√≥n razonable para explorar", "Tiene m√©ritos que justifican su lectura",
                    "Puede aportar perspectivas interesantes"],
                2: ["Es una experiencia literaria particular", "Podr√≠a ser valioso para ciertos lectores"],
                1: ["Es una propuesta experimental interesante"]
            },
            'casual': {
                5: ["Es buen√≠simo, la verdad", "Me gust√≥ un mont√≥n", "Est√° s√∫per bien"],
                4: ["Es bastante bueno", "Me parece una buena opci√≥n", "Est√° ch√©vere"],
                3: ["Est√° decente", "Es una opci√≥n s√≥lida", "No est√° mal"],
                2: ["Es raro pero interesante", "Podr√≠a gustarte"],
                1: ["Es... diferente"]
            }
        }

        personality_reasons = reasons.get(self._current_personality, reasons['casual'])
        return random.choice(personality_reasons.get(rating, personality_reasons[3]))

    def _generate_smart_audience(self, book) -> str:
        """Genera audiencia objetivo inteligente."""
        audiences = []

        # Basado en tipo de libro
        type_audiences = {
            'novel': ["amantes de la ficci√≥n", "lectores de narrativa", "fans de las historias"],
            'essay': ["lectores reflexivos", "personas anal√≠ticas", "pensadores cr√≠ticos"],
            'manual': ["personas pr√°cticas", "estudiosos del tema", "profesionales"],
            'comic': ["amantes del arte visual", "fans de la narrativa gr√°fica"]
        }

        if book.type in type_audiences:
            audiences.extend(type_audiences[book.type])

        # Audiencias seg√∫n personalidad
        personality_audiences = {
            'enthusiastic': ["aventureros literarios", "exploradores de historias", "entusiastas de la lectura"],
            'thoughtful': ["lectores contemplativo", "personas de mente anal√≠tica", "buscadores de profundidad"],
            'casual': ["lectores relajados", "gente con mente abierta", "cualquiera que busque algo nuevo"]
        }

        audiences.extend(personality_audiences.get(self._current_personality, []))

        return random.choice(audiences) if audiences else "lectores curiosos"

    def _generate_contextual_moods(self, book) -> List[str]:
        """Genera moods contextuales m√°s inteligentes."""
        moods = []

        # Moods base seg√∫n tipo
        type_moods = {
            'novel': ['inmersivo', 'narrativo', 'envolvente'],
            'essay': ['reflexivo', 'intelectual', 'anal√≠tico'],
            'manual': ['pr√°ctico', 'educativo', '√∫til'],
            'comic': ['visual', 'din√°mico', 'art√≠stico']
        }

        if book.type in type_moods:
            moods.extend(type_moods[book.type])

        # Moods seg√∫n hora del d√≠a
        now = datetime.now().hour
        if 6 <= now <= 12:
            moods.extend(['energizante', 'motivacional'])
        elif 13 <= now <= 18:
            moods.extend(['productivo', 'estimulante'])
        elif 19 <= now <= 22:
            moods.extend(['relajante', 'contemplativo'])
        else:
            moods.extend(['tranquilo', 'sereno'])

        # Moods seg√∫n personalidad
        personality_moods = {
            'enthusiastic': ['emocionante', 'inspirador', 'energ√©tico'],
            'thoughtful': ['profundo', 'meditativo', 'enriquecedor'],
            'casual': ['c√≥modo', 'accesible', 'natural']
        }

        moods.extend(personality_moods.get(self._current_personality, []))

        # Seleccionar 2-3 moods √∫nicos
        unique_moods = list(set(moods))
        return random.sample(unique_moods, min(3, len(unique_moods)))

    def _generate_special_note(self, book, downloads: int) -> Optional[str]:
        """Genera nota especial ocasional."""
        # 20% de probabilidad de nota especial
        if random.random() > 0.2:
            return None

        special_notes = []

        if downloads > 20:
            special_notes.append("üî• ¬°Es s√∫per popular! Muchos lectores ya lo han disfrutado.")
        elif downloads == 0:
            special_notes.append("‚ú® ¬°Ser√≠as el primero en descargarlo! Pioneer reader.")

        if book.year and book.year < 2000:
            special_notes.append("üìö Un cl√°sico que nunca pasa de moda.")
        elif book.year and book.year > 2020:
            special_notes.append("üÜï Una lectura contempor√°nea y actual.")

        if len(book.title) > 50:
            special_notes.append("üìñ El t√≠tulo ya cuenta toda una historia.")

        if not special_notes:
            general_notes = [
                "üíé Una joya oculta en nuestra biblioteca.",
                "üé≤ Elegido especialmente para este momento.",
                "‚≠ê Selecci√≥n personal de Neko-chan.",
                "üîÆ Mi intuici√≥n dice que te gustar√°."
            ]
            special_notes.extend(general_notes)

        return random.choice(special_notes)

    def _format_enhanced_message(self, book, opinion: BookOpinion) -> str:
        """Formatea mensaje mejorado con plantillas."""
        try:
            # Seleccionar plantillas seg√∫n personalidad
            intro_template = random.choice(self._message_templates[f'intro_{opinion.personality_tone}'])
            closing_template = random.choice(self._message_templates[f'closing_{opinion.personality_tone}'])

            # Generar estrellas con variaci√≥n
            star_styles = ["‚≠ê", "üåü", "‚ú®"]
            star_char = random.choice(star_styles)
            stars = star_char * opinion.rating + "‚òÜ" * (5 - opinion.rating)

            # Emojis para moods
            mood_emojis = {
                'reflexivo': 'ü§î', 'envolvente': 'üìñ', 'pr√°ctico': 'üõ†Ô∏è',
                'visual': 'üé®', 'interesante': '‚ú®', 'relajante': 'üòå',
                'emocionante': 'üé¢', 'energ√©tico': '‚ö°', 'profundo': 'üåä',
                'inmersivo': 'üåÄ', 'contemplativo': 'üßò', 'inspirador': 'üí°'
            }

            mood_text = " ".join([
                f"{mood_emojis.get(mood, 'üìö')}{mood.title()}"
                for mood in opinion.mood_tags
            ])

            message = f"""
{intro_template}

üìñ **{opinion.title}**
‚úçÔ∏è *{opinion.author}*

{stars} **Mi rating personal:** {opinion.rating}/5

üí≠ **Mi an√°lisis honesto:**

‚úÖ **Lo que me enamor√≥:**
{chr(10).join([f"‚Ä¢ {aspect}" for aspect in opinion.positive_aspects])}

ü§î **Puntos a considerar:**
{chr(10).join([f"‚Ä¢ {concern}" for concern in opinion.concerns])}

üí° **¬øPor qu√© lo recomiendo?**
{opinion.recommendation_reason}

üéØ **Ideal para:** {opinion.target_audience}
üè∑Ô∏è **Vibes:** {mood_text}
"""

            # Agregar nota especial si existe
            if opinion.special_note:
                message += f"\nüí´ **Nota especial:** {opinion.special_note}"

            # Agregar estad√≠sticas del d√≠a ocasionalmente
            if self._daily_recommendations > 0 and random.random() < 0.3:
                message += f"\n\nüìä *Recomendaci√≥n #{self._daily_recommendations + 1} del d√≠a*"

            message += f"""

üì• **Desc√°rgalo:** /{book.book_id}

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
{closing_template}
"""

            return message.strip()

        except Exception as e:
            log_service_error("EnhancedAutoActivityService", e)
            # Mensaje simple como fallback
            return f"""
üåü **Recomendaci√≥n de Neko-chan**

üìñ **{book.title}**
‚úçÔ∏è *{book.author}*

‚ú® {opinion.recommendation_reason}

üì• Desc√°rgalo: /{book.book_id}
"""

    async def _send_with_visual_effects(self, book, message: str) -> None:
        """Env√≠a mensaje con efectos visuales mejorados."""
        try:
            # Efecto de typing m√°s natural
            await self.bot.send_chat_action(
                chat_id=self.target_chat_id,
                action=ChatAction.TYPING
            )

            # Pausa para efecto natural
            await asyncio.sleep(random.uniform(1.5, 3.0))

            # Enviar con o sin portada
            if book.cover_id and random.random() < 0.8:  # 80% chance de usar portada
                await self.bot.send_chat_action(
                    chat_id=self.target_chat_id,
                    action=ChatAction.UPLOAD_PHOTO
                )

                await self.bot.send_photo(
                    chat_id=self.target_chat_id,
                    photo=book.cover_id,
                    caption=message,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await self.bot.send_message(
                    chat_id=self.target_chat_id,
                    text=message,
                    parse_mode=ParseMode.MARKDOWN
                )

        except Exception as e:
            self.logger.warning(f"Error con efectos visuales: {e}")
            # Fallback simple
            await self._send_activity_message(message)

    async def _send_enhanced_no_books_message(self) -> None:
        """Mensaje mejorado cuando no hay libros."""
        no_books_messages = [
            """
üòÖ **¬°Oops! Neko-chan se qued√≥ sin material...**

Parece que he agotado mi lista de recomendaciones por ahora. 

üéÅ **¬øQu√© tal si me ayudas?**
‚Ä¢ Sube algunos archivos EPUB nuevos
‚Ä¢ ¬°Prometo an√°lisis s√∫per detallados de cada uno!
‚Ä¢ Mis recomendaciones ser√°n a√∫n m√°s especiales

üîÑ **Mientras tanto:** puedes usar `/recommend [tema]` para recomendaciones personalizadas.

*¬°Volver√© pronto con m√°s treasures literarios!* ‚ú®
""",
            """
üìö **¬°Momento de reabastecimiento!**

Mi biblioteca personal de recomendaciones necesita nuevos libros para seguir sorprendi√©ndote.

üí° **Ideas:**
‚Ä¢ ¬øTienes alg√∫n EPUB favorito para compartir?
‚Ä¢ ¬øAlg√∫n g√©nero que te gustar√≠a ver m√°s?
‚Ä¢ ¬°Cualquier sugerencia es bienvenida!

üéØ *Usa `/list` para ver todos los libros disponibles o `/recommend` para b√∫squedas espec√≠ficas.*
"""
        ]

        message = random.choice(no_books_messages)
        await self._send_activity_message(message)

    def _update_recommendation_stats(self, book_id: str) -> None:
        """Actualiza estad√≠sticas de recomendaciones."""
        # Cache de libros recientes
        self._recently_recommended.append(book_id)
        if len(self._recently_recommended) > self._max_recent_cache:
            self._recently_recommended.pop(0)

        # Estad√≠sticas del libro
        self.book_repository.increment_searches(book_id)

        # Estad√≠sticas del servicio
        self._daily_recommendations += 1
        self._last_recommendation_time = datetime.now()

    # M√âTODOS DE CONTROL Y CONFIGURACI√ìN

    async def configure_activity_mode(self, mode: ActivityMode) -> bool:
        """Configura el modo de actividad."""
        try:
            self.activity_mode = mode
            self.logger.info(f"Modo de actividad cambiado a: {mode.value}")

            # Notificar cambio
            mode_descriptions = {
                ActivityMode.NORMAL: "recomendaciones equilibradas",
                ActivityMode.POPULAR: "enfoque en libros populares",
                ActivityMode.DISCOVERY: "descubrimiento de joyas ocultas",
                ActivityMode.VARIED: "m√°xima variedad"
            }

            message = f"""
‚öôÔ∏è **Configuraci√≥n actualizada**

üéØ **Nuevo modo:** {mode_descriptions[mode]}

*Las pr√≥ximas recomendaciones seguir√°n este enfoque.*
"""
            await self._send_activity_message(message)
            return True

        except Exception as e:
            log_service_error("EnhancedAutoActivityService", e)
            return False

    def configure_quiet_hours(self, start_hour: int, end_hour: int, enabled: bool = True) -> bool:
        """Configura horarios silenciosos."""
        try:
            if not (0 <= start_hour <= 23) or not (0 <= end_hour <= 23):
                return False

            self.quiet_hours = (start_hour, end_hour)
            self.respect_quiet_hours = enabled

            self.logger.info(
                f"Horarios silenciosos: {start_hour}:00-{end_hour}:00 ({'activo' if enabled else 'inactivo'})")
            return True

        except Exception as e:
            log_service_error("EnhancedAutoActivityService", e)
            return False

    async def force_recommendation_with_mode(self, mode: Optional[ActivityMode] = None) -> bool:
        """Fuerza recomendaci√≥n con modo espec√≠fico."""
        try:
            original_mode = self.activity_mode
            if mode:
                self.activity_mode = mode

            await self._send_enhanced_recommendation()

            if mode:
                self.activity_mode = original_mode

            return True

        except Exception as e:
            log_service_error("EnhancedAutoActivityService", e)
            return False

    def get_enhanced_status(self) -> Dict[str, Any]:
        """Retorna estado completo y detallado del servicio."""
        return {
            'is_running': self._is_running,
            'interval_minutes': self.interval_minutes,
            'activity_mode': self.activity_mode.value,
            'current_personality': self._current_personality,
            'target_chat_id': self.target_chat_id,
            'last_recommendation': self._last_recommendation_time.isoformat() if self._last_recommendation_time else None,
            'recently_recommended_count': len(self._recently_recommended),
            'daily_recommendations': self._daily_recommendations,
            'quiet_hours': {
                'enabled': self.respect_quiet_hours,
                'start': self.quiet_hours[0],
                'end': self.quiet_hours[1],
                'currently_quiet': self._is_quiet_time()
            },
            'next_recommendation_eta': self._calculate_next_recommendation_eta(),
            'cache_status': {
                'size': len(self._recently_recommended),
                'max_size': self._max_recent_cache,
                'usage_percent': round(len(self._recently_recommended) / self._max_recent_cache * 100, 1)
            }
        }

    async def stop_activity_service(self) -> None:
        """Detiene el servicio con mensaje de despedida."""
        try:
            self._is_running = False

            if self._task and not self._task.done():
                self._task.cancel()
                try:
                    await self._task
                except asyncio.CancelledError:
                    pass

            # Mensaje de despedida
            farewell_message = f"""
üò¥ **Neko-chan se va a descansar...**

¬°Hasta aqu√≠ llegamos por hoy! 

üìä **Estad√≠sticas de la sesi√≥n:**
‚Ä¢ Recomendaciones enviadas: {self._daily_recommendations}
‚Ä¢ Libros en rotaci√≥n: {len(self._recently_recommended)}

üí§ *Puedes reactivarme cuando quieras con `/activity start`*

¬°Que disfrutes la lectura! üìö‚ú®
"""

            await self._send_activity_message(farewell_message)
            self.logger.info("üõë Servicio de actividad autom√°tica detenido")

        except Exception as e:
            log_service_error("EnhancedAutoActivityService", e)

    async def _send_activity_message(self, message: str) -> None:
        """Env√≠a mensaje de actividad con manejo de errores."""
        try:
            await self.bot.send_chat_action(
                chat_id=self.target_chat_id,
                action=ChatAction.TYPING
            )

            await self.bot.send_message(
                chat_id=self.target_chat_id,
                text=message,
                parse_mode=ParseMode.MARKDOWN
            )

        except TelegramError as e:
            self.logger.error(f"Error enviando mensaje de actividad: {e}")
        except Exception as e:
            log_service_error("EnhancedAutoActivityService", e)

    def _calculate_dynamic_rating(self, book, downloads: int) -> int:
        """Calcula rating din√°mico m√°s sofisticado."""
        base_rating = 3.0

        # Factores de popularidad
        if downloads > 25:
            base_rating += 1.2
        elif downloads > 15:
            base_rating += 0.8
        elif downloads > 8:
            base_rating += 0.4
        elif downloads < 2:
            base_rating -= 0.3

        # Factores de completitud de metadatos
        if book.description and len(book.description) > 200:
            base_rating += 0.4
        if book.publisher:
            base_rating += 0.2
        if book.year and 2000 <= book.year <= 2023:
            base_rating += 0.3

        # Ajuste por personalidad
        personality_adjustments = {
            'enthusiastic': 0.3,  # M√°s generosa
            'thoughtful': 0.0,  # Neutral
            'casual': -0.2  # M√°s cr√≠tica
        }

        base_rating += personality_adjustments.get(self._current_personality, 0)

        return max(1, min(5, round(base_rating)))

    def _calculate_next_recommendation_eta(self) -> Optional[str]:
        """Calcula ETA m√°s preciso."""
        if not self._last_recommendation_time or not self._is_running:
            return None

        next_time = self._last_recommendation_time + timedelta(minutes=self.interval_minutes)
        now = datetime.now()

        if next_time > now:
            delta = next_time - now
            total_minutes = int(delta.total_seconds() / 60)

            if total_minutes < 60:
                return f"{total_minutes} minutos"
            else:
                hours = total_minutes // 60
                minutes = total_minutes % 60
                return f"{hours}h {minutes}m" if minutes > 0 else f"{hours}h"
        else:
            return "Pr√≥ximamente"


# Crear alias para mantener compatibilidad
AutoActivityService = EnhancedAutoActivityService